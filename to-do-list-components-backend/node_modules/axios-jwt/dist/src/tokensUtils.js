"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLoggedIn = exports.clearAuthTokens = exports.getAccessToken = exports.getRefreshToken = exports.setAccessToken = void 0;
var setAuthTokens_1 = require("./setAuthTokens");
var StorageProxy_1 = require("./StorageProxy");
var StorageKey_1 = require("./StorageKey");
// PRIVATE
/**
 *  Returns the refresh and access tokens
 * @returns {IAuthTokens} Object containing refresh and access tokens
 */
var getAuthTokens = function () {
    var _a;
    var rawTokens = (_a = StorageProxy_1.StorageProxy.Storage) === null || _a === void 0 ? void 0 : _a.get(StorageKey_1.STORAGE_KEY);
    if (!rawTokens)
        return;
    try {
        // parse stored tokens JSON
        return JSON.parse(rawTokens);
    }
    catch (error) {
        if (error instanceof SyntaxError) {
            error.message = "Failed to parse auth tokens: ".concat(rawTokens);
            throw error;
        }
    }
};
/**
 * Sets the access token
 * @param {string} token - Access token
 */
var setAccessToken = function (token) {
    var tokens = getAuthTokens();
    if (!tokens) {
        throw new Error('Unable to update access token since there are not tokens currently stored');
    }
    tokens.accessToken = token;
    (0, setAuthTokens_1.setAuthTokens)(tokens);
};
exports.setAccessToken = setAccessToken;
/**
 * Returns the stored refresh token
 * @returns {string} Refresh token
 */
var getRefreshToken = function () {
    var tokens = getAuthTokens();
    return tokens ? tokens.refreshToken : undefined;
};
exports.getRefreshToken = getRefreshToken;
/**
 * Returns the stored access token
 * @returns {string} Access token
 */
var getAccessToken = function () {
    var tokens = getAuthTokens();
    return tokens ? tokens.accessToken : undefined;
};
exports.getAccessToken = getAccessToken;
/**
 * Clears both tokens
 */
var clearAuthTokens = function () { var _a; return (_a = StorageProxy_1.StorageProxy.Storage) === null || _a === void 0 ? void 0 : _a.remove(StorageKey_1.STORAGE_KEY); };
exports.clearAuthTokens = clearAuthTokens;
/**
 * Checks if refresh tokens are stored
 * @returns Whether the user is logged in or not
 */
var isLoggedIn = function () {
    var token = (0, exports.getRefreshToken)();
    return !!token;
};
exports.isLoggedIn = isLoggedIn;
//# sourceMappingURL=tokensUtils.js.map